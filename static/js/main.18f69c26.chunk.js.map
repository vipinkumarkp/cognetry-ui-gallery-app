{"version":3,"sources":["redux/albumPhotoList/constants.js","redux/albumList/constants.js","redux/albumList/actions.js","redux/albumPhotoList/actions.js","serviceWorker.js","routes/PublicRoute.js","routes/index.js","routes/Routes.js","App.js","redux/albumPhotoList/reducers.js","redux/albumList/reducers.js","redux/reducers.js","helpers/api.js","helpers/endpoints.js","redux/albumList/saga.js","redux/albumPhotoList/saga.js","redux/sagas.js","redux/store.js","index.js"],"names":["albumPhotoListConst","GET_ALBUM_PHOTO_LIST","GET_ALBUM_PHOTO_LIST_SUCCESS","GET_ALBUM_PHOTO_LIST_FAILED","albumListConst","GET_ALBUM_LIST","GET_ALBUM_LIST_SUCCESS","GET_ALBUM_LIST_FAILED","getAlbumList","type","payload","getAlbumListSuccess","hotBoxListData","getAlbumListFailed","error","getAlbumPhotoList","getAlbumPhotoListSuccess","getAlbumPhotoListFailed","Boolean","window","location","hostname","match","PublicRoute","Component","component","rest","restricted","render","props","landingPage","React","lazy","allFlattenRoutes","path","name","exact","route","mainLayout","Loadable","loader","loaded","default","loading","connect","state","layout","Layout","routes","map","index","children","App","className","INIT_STATE","albumPhotoListData","albumPhotoList","action","albumListData","albumList","combineReducers","apiCall","options","axios","then","response","baseUrl","endpoints","hostUrl","getAlbumListApi","getAlbumPhotoListApi","watchgetAlbumList","getAlbumListSaga","headers","method","url","call","status","data","put","message","takeEvery","all","fork","watchgetAlbumPhotoList","getAlbumPhotoListSaga","rootSaga","getState","sagaMiddleware","createSagaMiddleware","middlewares","store","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","applyMiddleware","run","sagas","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18f69c26.chunk.js","sourcesContent":["/* USER */\n\nexport const albumPhotoListConst = {\n  GET_ALBUM_PHOTO_LIST: \"GET_ALBUM_PHOTO_LIST\",\n  GET_ALBUM_PHOTO_LIST_SUCCESS: \"GET_ALBUM_PHOTO_LIST_SUCCESS\",\n  GET_ALBUM_PHOTO_LIST_FAILED: \"GET_ALBUM_PHOTO_LIST_FAILED\",\n};\n","/* USER */\n\nexport const albumListConst = {\n  GET_ALBUM_LIST: \"GET_ALBUM_LIST\",\n  GET_ALBUM_LIST_SUCCESS: \"GET_ALBUM_LIST_SUCCESS\",\n  GET_ALBUM_LIST_FAILED: \"GET_ALBUM_LIST_FAILED\",\n};\n","import { albumListConst } from \"./constants\";\n\nexport const getAlbumList = () => ({\n  type: albumListConst.GET_ALBUM_LIST,\n  payload: {},\n});\n\nexport const getAlbumListSuccess = (hotBoxListData) => ({\n  type: albumListConst.GET_ALBUM_LIST_SUCCESS,\n  payload: hotBoxListData,\n});\n\nexport const getAlbumListFailed = (error) => ({\n  type: albumListConst.GET_ALBUM_LIST_FAILED,\n  payload: error,\n});\n\n","import { albumPhotoListConst } from \"./constants\";\n\nexport const getAlbumPhotoList = () => ({\n  type: albumPhotoListConst.GET_ALBUM_PHOTO_LIST,\n  payload: {},\n});\n\nexport const getAlbumPhotoListSuccess = (hotBoxListData) => ({\n  type: albumPhotoListConst.GET_ALBUM_PHOTO_LIST_SUCCESS,\n  payload: hotBoxListData,\n});\n\nexport const getAlbumPhotoListFailed = (error) => ({\n  type: albumPhotoListConst.GET_ALBUM_PHOTO_LIST_FAILED,\n  payload: error,\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  return <Route {...rest} render={(props) => <Component {...props} />} />;\n};\n\nexport default PublicRoute;\n","import React from \"react\";\nimport PublicRoute from \"./PublicRoute\";\n\nconst landingPage = React.lazy(() => import(\"../containers/Albums\"));\nconst homePage = React.lazy(() => import(\"../containers/Home\"));\n\nexport const allFlattenRoutes = [\n  {\n    path: \"/\",\n    name: \"Home\",\n    component: homePage,\n    exact: true,\n    route: PublicRoute,\n  },\n  {\n    path: \"/albums\",\n    name: \"Albums\",\n    component: landingPage,\n    exact: true,\n    route: PublicRoute,\n  }\n];\n\nexport const authProtectedRoutes = [];\n","import React from \"react\";\r\nimport { BrowserRouter, Switch } from \"react-router-dom\";\r\nimport Loadable from \"react-loadable\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { allFlattenRoutes as routes } from \"./index\";\r\n\r\nconst loading = () => <div></div>;\r\nconst mainLayout = Loadable({\r\n  loader: () => import(\"../layouts/MainLayout\"),\r\n  render(loaded, props) {\r\n    let Component = loaded.default;\r\n    return <Component {...props} />;\r\n  },\r\n  loading,\r\n});\r\n\r\nfunction Routes(props) {\r\n  const Layout = mainLayout;\r\n  return (\r\n    <BrowserRouter>\r\n      <Layout {...props}>\r\n        <Switch>\r\n          {routes.map((route, index) => {\r\n            return !route.children ? (\r\n              <route.route\r\n                key={index}\r\n                path={route.path}\r\n                exact={route.exact}\r\n                component={route.component}\r\n              ></route.route>\r\n            ) : null;\r\n          })}\r\n        </Switch>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    layout: state.Layout,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Routes);\r\n","import React from 'react';\nimport Routes from './routes/Routes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// @flow\nimport { albumPhotoListConst } from \"./constants\";\n\nconst INIT_STATE = {\n  loading: false,\n  albumPhotoListData: {},\n};\n\nconst albumPhotoList = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    \n\n    case albumPhotoListConst.GET_ALBUM_PHOTO_LIST:\n      return { ...state, loading: true };\n    case albumPhotoListConst.GET_ALBUM_PHOTO_LIST_SUCCESS:\n      return {\n        ...state,\n        albumPhotoListData: action.payload,\n        loading: false,\n        error: null,\n      };\n    case albumPhotoListConst.GET_ALBUM_PHOTO_LIST_FAILED:\n      return { ...state, error: action.payload, loading: false };\n    default:\n      return { ...state };\n  }\n};\n\nexport default albumPhotoList;\n","// @flow\nimport { albumListConst } from \"./constants\";\n\nconst INIT_STATE = {\n  loading: false,\n  albumListData: {},\n};\n\nconst albumList = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    \n\n    case albumListConst.GET_ALBUM_LIST:\n      return { ...state, loading: true };\n    case albumListConst.GET_ALBUM_LIST_SUCCESS:\n      return {\n        ...state,\n        albumListData: action.payload,\n        loading: false,\n        error: null,\n      };\n    case albumListConst.GET_ALBUM_LIST_FAILED:\n      return { ...state, error: action.payload, loading: false };\n    default:\n      return { ...state };\n  }\n};\n\nexport default albumList;\n","import { combineReducers } from \"redux\";\nimport albumPhotoList from \"./albumPhotoList/reducers.js\";\nimport albumList from \"./albumList/reducers.js\";\n\nexport default combineReducers({\n  albumList,\n  albumPhotoList\n});\n","import axios from \"axios\";\n/**\n * Fetch data from given url\n * @param {*} url\n * @param {*} options\n */\nconst fetchJSON = (url, options = {}) => {\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.status === 200) {\n        throw response.json();\n      }\n      return response.json();\n    })\n    .then((json) => {\n      return json;\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\nconst apiCall = (options) => {\n  return axios(options).then((response) => response);\n};\n\n\nexport { fetchJSON, apiCall };\n","const baseUrl = \"https://jsonplaceholder.typicode.com\";\n\nexport const endpoints = {\n  hostUrl: baseUrl,\n  getAlbumListApi: `${baseUrl}/albums`,\n  getAlbumPhotoListApi: `${baseUrl}/photos`,\n};\n","// @flow\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\n\nimport { apiCall } from \"../../helpers/api\";\nimport { endpoints } from \"../../helpers/endpoints\";\n\nimport { albumListConst } from \"./constants\";\n\nimport {\n  getAlbumListSuccess,\n  getAlbumListFailed,\n} from \"./actions\";\n\n\nfunction* getAlbumList() {\n  let options = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"GET\",\n    url: endpoints.getAlbumListApi,\n  };\n  try {\n    const response = yield call(apiCall, options);\n    if (response.status === 200 && response.data) {\n      yield put(getAlbumListSuccess(response.data));\n    } else {\n      yield put(getAlbumListFailed(response.data.message));\n    }\n  } catch (error) {\n    let message;\n    switch (error.status) {\n      case 500:\n        message = \"Internal Server Error\";\n        break;\n      case 401:\n        message = \"Invalid credentials\";\n        break;\n      default:\n        message = error.response.data.message;\n    }\n    yield put(getAlbumListFailed(message));\n  }\n}\n\n\nexport function* watchgetAlbumList() {\n  yield takeEvery(albumListConst.GET_ALBUM_LIST, getAlbumList);\n}\n\n\nfunction* getAlbumListSaga() {\n  yield all([\n    fork(watchgetAlbumList),\n  ]);\n}\n\nexport default getAlbumListSaga;\n","// @flow\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\n\nimport { apiCall } from \"../../helpers/api\";\nimport { endpoints } from \"../../helpers/endpoints\";\n\nimport { albumPhotoListConst } from \"./constants\";\n\nimport {\n  getAlbumPhotoListSuccess,\n  getAlbumPhotoListFailed,\n} from \"./actions\";\n\n\nfunction* getAlbumPhotoList() {\n  let options = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"GET\",\n    url: endpoints.getAlbumPhotoListApi,\n  };\n  try {\n    const response = yield call(apiCall, options);\n    if (response.status === 200 && response.data) {\n      yield put(getAlbumPhotoListSuccess(response.data));\n    } else {\n      yield put(getAlbumPhotoListFailed(response.data.message));\n    }\n  } catch (error) {\n    let message;\n    switch (error.status) {\n      case 500:\n        message = \"Internal Server Error\";\n        break;\n      case 401:\n        message = \"Invalid credentials\";\n        break;\n      default:\n        message = error.response.data.message;\n    }\n    yield put(getAlbumPhotoListFailed(message));\n  }\n}\n\n\nexport function* watchgetAlbumPhotoList() {\n  yield takeEvery(albumPhotoListConst.GET_ALBUM_PHOTO_LIST, getAlbumPhotoList);\n}\n\n\nfunction* getAlbumPhotoListSaga() {\n  yield all([\n    fork(watchgetAlbumPhotoList),\n  ]);\n}\n\nexport default getAlbumPhotoListSaga;\n","import { all } from \"redux-saga/effects\";\nimport getAlbumListSaga from \"./albumList/saga\";\nimport getAlbumPhotoListSaga from \"./albumPhotoList/saga\";\n\n\nexport default function* rootSaga(getState: any): any {\n  yield all([\n    getAlbumListSaga(),\n    getAlbumPhotoListSaga()\n  ]);\n}\n","// @flow\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState: {}) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n    sagaMiddleware.run(sagas);\n    return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport { configureStore } from \"./redux/store\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}